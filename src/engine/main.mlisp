// We use bitboards to represent the board state. Each bitboard represents a different piece type.
// The board is represented as a 64-bit integer, with each bit representing a square on the board.
// The least significant bit represents a1, and the most significant bit represents h8.

[defunc [setbit board index]
	[asm "mov eax, dword [ebp+12]"]
	[asm "mov ecx, dword [ebp+8]"]
	[asm "shl eax, cl"]
	[asm "or dword [ebp+8], eax"]]

[defunc [derefb ptr]
	[asm "mov ebx, dword [ebp+8]"]
	[asm "xor eax, eax"]
	[asm "mov al, byte [ebx]"]]

[defunc [write fd buf len]
	[asm "mov eax, 4"]
	[asm "mov ebx, dword [ebp+16]"] // get fd
	[asm "mov ecx, dword [ebp+12]"] // get buf
	[asm "mov edx, dword [ebp+8]"] // get len
	[asm "int 0x80"]]

[defunc [read fd buf len]
	[asm "mov eax, 3"]
	[asm "mov ebx, dword [ebp+16]"] // get fd
	[asm "mov ecx, dword [ebp+12]"] // get buf
	[asm "mov edx, dword [ebp+8]"] // get len
	[asm "int 0x80"]]

// We're in 32 bit mode, so we need to split the shift into two instructions. (shld and shl)
[defunc [shl64 numh numl shift_amount] // 16 12 8
	[asm "mov ecx, dword [ebp+8]"] // Get the shift amount
	[asm "mov eax, dword [ebp+12]"]
	[asm "mov edx, dword [ebp+16]"]
	[asm "shld edx, eax, cl"]
	[asm "shl eax, cl"]]

[defunc [printstr str]
	[define len 0]
	[while [!= [derefb [+ str len]] 0]
		[set! len [+ len 1]]]
	[write 1 str len]]

[defunc [printchar char]
	[define buf [malloc 1]]
	[memset buf char 1]
	[write 1 buf 1]
	[free buf]]

[defunc [printint num]
	[define digit 0]
	[define len 0]
	[while [!= num 0]
		[set! digit [% num 10]]
		[set! digit [+ digit 48]]
		[asm "push dword [ebp-4]"] // Push digit
		[set! num [/ num 10]]
		[set! len [+ len 1]]]
	[asm "mov eax, 4"]
	[asm "mov ebx, 1"]
	[asm "mov edx, [ebp-8]"] // Get length
	[asm "imul edx, edx, 4"]
	[asm "mov ecx, esp"]
	[asm "int 0x80"]]

[defunc [setbyte ptr value]
	[asm "mov eax, dword [ebp+12]"]
	[asm "mov bl, byte [ebp+8]"]
	[asm "mov byte [eax], bl"]]

[defunc [memset ptr value num]
	[define i 0]
	[while [!= i num]
		[setbyte [+ ptr i] value]
		[set! i [+ i 1]]]]

[defunc [memcpy dest src num]
	[define i 0]
	[while [!= i num]
		[setbyte [+ dest i] [derefb [+ src i]]]
		[set! i [+ i 1]]]]

// Convert an unsigned integer to a string
[defunc [uinttostr num buffer]
	[define digit 0]
	[define len 1]
	// We use a buffer of size 16 to store the string
	[define offset [+ buffer 15]]
	// We write the string in reverse order, and then reverse it at the end
	[while [!= num 0]
		[set! digit [+ [% num 10] 48]]
		[memset [- offset len] digit 1]
		[set! num [/ num 10]]
		[set! len [+ len 1]]]
	[memset offset 0 1]
	[return [- offset len]]]

[defunc [getbit board index]
	[asm "mov eax, dword [ebp+12]"]
	[asm "mov ecx, dword [ebp+8]"]
	[asm "shr eax, cl"]
	[asm "and eax, 1"]]

[defunc [clearbit board index]
	[asm "mov eax, dword [ebp+12]"]
	[asm "mov ecx, dword [ebp+8]"]
	[asm "shl eax, cl"]
	[asm "not eax"]
	[asm "and dword [ebp+8], eax"]]

[defunc [char str index]
	[return [derefb [+ str index]]]]

// Array access at index
[defunc [strarrayat arr index]
	[define i 0]
	[define items 0]
	[while [!= items index]
		[while [!= [char arr i] 0]
			[set! i [+ i 1]]]
		[set! items [+ items 1]]
		[set! i [+ i 1]]]
	[return [+ arr i]]]

[defunc [and a b]
	[asm "mov eax, dword [ebp+8]"]
	[asm "and eax, dword [ebp+12]"]]

[defunc [or a b]
	[asm "mov eax, dword [ebp+8]"]
	[asm "or eax, dword [ebp+12]"]]

[defunc [isdigit char]
	[if [and [>= char 48] [<= char 57]]
		[return 1]
		[return 0]]]

[defunc [substr str buf start end]
	[define i 0]
	[while [!= start end]
		[setbyte [+ buf i] [char str start]]
		[set! start [+ start 1]]
		[set! i [+ i 1]]]
	[setbyte [+ buf i] 0]]

[defunc [printf fmt args]
	[define i 0]
	[define lastWasPercent 0]
	[define lastPercentPosition 0]
	[define lastWasBackslash 0]
	[define varCount 2] // -12
	[while [!= [char fmt i] 0]
		[if [== lastWasPercent 1]
			[if [== [char fmt i] 115] // s
				[printstr args]
				[set! lastWasPercent 0]]
			[if [== [char fmt i] 99] // c
				[printchar args]
				[set! lastWasPercent 0]]
			[if [== [char fmt i] 100] // d
				[printint args]
				[set! lastWasPercent 0]]
			[if [== [char fmt i] 37]
				[printchar 37]
				[set! lastWasPercent 0]]]
		[if [== lastWasBackslash 1]
			[if [== [char fmt i] 92] // \
				[printchar 92]
				[set! lastWasBackslash 0]]
			[if [== [char fmt i] 110] // n
				[printchar 10]
				[set! lastWasBackslash 0]]
			[if [== [char fmt i] 116] // t
				[printchar 9]
				[set! lastWasBackslash 0]]
			[if [== [char fmt i] 114] // r
				[printchar 13]
				[set! lastWasBackslash 0]]
			[if [== [char fmt i] 37]
				[printchar 37]
				[set! lastWasBackslash 0]]]
		// Capture %
		[if [== [char fmt i] 37] // %
			[if [== lastWasPercent 1]
				[printchar 37]
				[set! lastWasPercent 0]]
			[if [== lastWasPercent 0]
				[write 1 [+ fmt lastPercentPosition] [- i lastPercentPosition]]
				[set! lastPercentPosition [+ i 2]]
				[set! lastWasPercent 1]]]
		[if [== [char fmt i] 92] // \
			[if [== lastWasBackslash 1]
				[printchar 92]
				[set! lastWasBackslash 0]]
			[if [== lastWasBackslash 0]
				[write 1 [+ fmt lastPercentPosition] [- i lastPercentPosition]]
				[set! lastPercentPosition [+ i 2]]
				[set! lastWasBackslash 1]]]
		[set! i [+ i 1]]]
	// Dump the rest of the string
	[write 1 [+ fmt lastPercentPosition] [- i lastPercentPosition]]]

// [defunc [constructboard board]
// 	[define row1 8]
// 	[define col1 0]
// 	[define i1 0]
// 	[define current1 0]
// 	[printf "   a b c d e f g h\n ┌─────────────────┐\n%d│" row1]
// 	[while [!= i1 63]
// 		[set! current1 [char board i1]]
// 		[if [== [% i1 8] 0] // Check if it's a "/"
// 			[set! row1 [- row1 1]]
// 			[set! col1 0]
// 			[printf " │\n%d│" row1]]
// 		[printstr " "]
// 		[if [== current1 1] // p
// 			[printstr "♙"]]
// 		[if [== current1 2] // k
// 			[printstr "♔"]]
// 		[if [== current1 3] // r
// 			[printstr "♖"]]
// 		[if [== current1 4] // n
// 			[printstr "♘"]]
// 		[if [== current1 5] // q
// 			[printstr "♕"]]
// 		[if [== current1 6] // b
// 			[printstr "♗"]]
// 		[if [== current1 7] // P
// 			[printstr "♟︎"]]
// 		[if [== current1 8] // K
// 			[printstr "♚"]]
// 		[if [== current1 9] // R
// 			[printstr "♜"]]
// 		[if [== current1 10] // N
// 			[printstr "♞"]]
// 		[if [== current1 11] // Q
// 			[printstr "♛"]]
// 		[if [== current1 12] // B
// 			[printstr "♝"]]
// 		[set! i1 [+ i1 1]]]]

[defunc [main argc argv]
	[premalloc 0]
	[define fen [strarrayat argv 1]] // Get the fen string from cmdline
	[define newline 10]

	[define row 8]
	[define col 0]

	[define output [malloc 16]] // Reserve space for board

	// Character types:
	// p - pawn - 1
	// k - king - 2
	// r - rook - 3
	// n - knight - 4
	// q - queen - 5
	// b - bishop - 6
	// P - pawn - 7
	// K - king - 8
	// R - rook - 9
	// N - knight - 10
	// Q - queen - 11
	// B - bishop - 12

	[define board [malloc 64]]

	[define i 0]
	[define current 0]
	[printf "   a b c d e f g h\n ┌─────────────────┐\n%d│" row]
	[while [!= [char fen i] 0]
		[set! current [char fen i]]
		[if [== current 47] // Check if it's a "/"
			[set! row [- row 1]]
			[set! col 0]
			[printf " │\n%d│" row]]
		[if [isdigit current]
			[define offset [- current 48]]
			[set! col [+ col offset]]
			// TODO: Calculation doesn't work correctly, eax gets overwritten when doing [+ x [- 1 2]]
			[define doubleOffset [* offset 2]]
			[memset output 32 doubleOffset]
			[setbyte [+ output doubleOffset] 0]
			[printstr output]
			[set! col [+ col 1]]]
		[if [and [!= [isdigit current] 1] [!= current 47]]
			[printstr " "]
			[define boardOffset [+ board col]]
			[define rowNumber [- 8 row]]
			[define rowOffset [* rowNumber 8]]
			[set! boardOffset [+ boardOffset rowOffset]]
			[if [== current 112] // p
				[setbyte boardOffset 1]
				[printstr "♙"]]
			[if [== current 107] // k
				[setbyte boardOffset 2]
				[printstr "♔"]]
			[if [== current 114] // r
				[setbyte boardOffset 3]
				[printstr "♖"]]
			[if [== current 110] // n
				[setbyte boardOffset 4]
				[printstr "♘"]]
			[if [== current 113] // q
				[setbyte boardOffset 5]
				[printstr "♕"]]
			[if [== current 98] // b
				[setbyte boardOffset 6]
				[printstr "♗"]]
			[if [== current 80] // P
				[setbyte boardOffset 7]
				[printstr "♟︎"]]
			[if [== current 75] // K
				[setbyte boardOffset 8]
				[printstr "♚"]]
			[if [== current 82] // R
				[setbyte boardOffset 9]
				[printstr "♜"]]
			[if [== current 78] // N
				[setbyte boardOffset 10]
				[printstr "♞"]]
			[if [== current 81] // Q
				[setbyte boardOffset 11]
				[printstr "♛"]]
			[if [== current 66] // B
				[setbyte boardOffset 12]
				[printstr "♝"]]
			]
		[set! i [+ i 1]]]
	[printf " │\n └─────────────────┘\nYour turn (move a piece using xxyy notation):\n> " ""]

	[define input [malloc 5]]
	[define from [malloc 2]]
	[define to [malloc 2]]

	[read 0 output 5] // Also read the enter key

	[substr output from 0 2]
	[substr output to 2 4]

	// Convert the from character to a column number
	// Since they range from a to h, we can just subtract 97 from the ascii value to get the column number
	[define fromCol [- [char from 0] 97]]
	[define fromRowChar [- [char from 1] 48]]
	[set! fromRowChar [- 8 fromRowChar]]
	[define fromRow [* fromRowChar 8]]

	[define fromOffset [+ fromCol fromRow]]

	[define toCol [- [char to 0] 97]]
	[define toRowChar [- [char to 1] 48]]
	[set! toRowChar [- 8 toRowChar]]
	[define toRow [* toRowChar 8]]

	[define toOffset [+ toCol toRow]]

	[define fromPiece [derefb [+ board fromOffset]]]
	[define toPiece [derefb [+ board toOffset]]]

	[if [== fromPiece 0]
		[printf "There is no piece at %s\n" from]
		[return 0]]

	[if [== toPiece 0]
		[setbyte [+ board toOffset] fromPiece]
		[setbyte [+ board fromOffset] 0]
		[printf "Moved piece from %s\n" from]]

	// [constructboard board]

	[printf "From: %s\n" from]
	[printf "To  : %s\n" to]

	[asm "mov eax, 0"]
		
	[return 0]]

[define argc 0]
[asm "mov eax, [ebp+4]"]
[asm "mov [argc], eax"]
[define argv 0]
[asm "mov eax, [ebp+8]"]
[asm "mov [argv], eax"]
[main argc argv]